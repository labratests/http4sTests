# baseURI: http://topbraid.org/examples/shaclsquare
# imports: http://www.w3.org/ns/shacl
# prefix: ex

@prefix arg: <http://www.w3.org/ns/shacl/arg#> .
@prefix ex: <http://topbraid.org/examples/shaclsquare#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <http://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

schema:Person
  rdf:type sh:ShapeClass ;
  rdfs:label "Person" ;
  rdfs:subClassOf rdfs:Resource ;
  sh:property [
      rdfs:comment "Zero or more email addresses of the person." ;
      rdfs:label "email" ;
      sh:datatype xsd:string ;
      sh:predicate schema:email ;
    ] ;
.
<http://topbraid.org/examples/shaclsquare>
  rdf:type sh:Graph ;
  rdfs:comment "A simple example model demonstrating some key features of SHACL. Have a look at the ex:computeArea function, the rule attached to ex:Rectangle and the constraint attached to ex:Square." ;
  rdfs:label "SHACL Square Example" ;
  sh:shapesGraph <http://www.w3.org/ns/shacl> ;
.
ex:InvalidSquare
  rdf:type ex:Square ;
  ex:creator ex:PersonWithoutEmail ;
  ex:height 8 ;
  ex:width 9 ;
  rdfs:label "Invalid square" ;
.
ex:PersonWithEmail
  rdf:type schema:Person ;
  schema:email "john@example.com" ;
.
ex:PersonWithoutEmail
  rdf:type schema:Person ;
.
ex:PositivePropertyValueConstraint
  rdf:type sh:ConstraintTemplate ;
  rdfs:comment "A template that can be used to define a SHACL constraint on a given property (arg:property) to make sure that the values of that property are > 0." ;
  rdfs:label "Positive property value constraint" ;
  rdfs:subClassOf sh:TemplateConstraint ;
  sh:argument [
      rdfs:comment "The property to constrain (e.g. ex:width or ex:height)." ;
      rdfs:label "property" ;
      sh:class rdfs:Resource ;
      sh:predicate arg:property ;
    ] ;
  sh:labelTemplate "Values of property {?property} must be > 0" ;
  sh:message "Property {?property} must only have positive values, but found {?object}" ;
  sh:sparql """
		SELECT ?this (?this AS ?subject) (?property AS ?predicate) ?object ?property
		WHERE {
			?this ?property ?object .
			FILTER (?object <= 0) .
		}
		""" ;
.
ex:Rectangle
  rdf:type sh:ShapeClass ;
  rdfs:label "Rectangle" ;
  rdfs:subClassOf rdfs:Resource ;
  sh:constraint [
      rdf:type ex:PositivePropertyValueConstraint ;
      arg:property ex:height ;
    ] ;
  sh:constraint [
      rdf:type ex:PositivePropertyValueConstraint ;
      arg:property ex:width ;
    ] ;
  sh:property [
      rdfs:comment "The creator of the Rectangle." ;
      rdfs:label "creator" ;
      sh:class schema:Person ;
      sh:maxCount 1 ;
      sh:predicate ex:creator ;
      sh:valueShape [
          sh:property [
              sh:minCount 1 ;
              sh:predicate schema:email ;
            ] ;
        ] ;
    ] ;
  sh:property [
      rdfs:comment "The height of the Rectangle." ;
      rdfs:label "height" ;
      sh:datatype xsd:integer ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:predicate ex:height ;
    ] ;
  sh:property [
      rdfs:comment "The width of the Rectangle." ;
      rdfs:label "width" ;
      sh:datatype xsd:integer ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:predicate ex:width ;
    ] ;
.
ex:Square
  rdf:type sh:ShapeClass ;
  rdfs:label "Square" ;
  rdfs:subClassOf ex:Rectangle ;
  sh:constraint [
      a sh:SPARQLConstraint ;
      sh:message "Width and height of a Square must be equal" ;
      sh:predicate ex:width ;
      sh:sparql """
			SELECT ?this (?this AS ?subject) (?width AS ?object)
			WHERE {
				?this ex:width ?width .
				?this ex:height ?height .
				FILTER (?width != ?height) .
			}
			""" ;
    ] ;
.
ex:TestRectangle
  rdf:type ex:Rectangle ;
  ex:creator ex:PersonWithEmail ;
  ex:height 6 ;
  ex:width 7 ;
  rdfs:label "Test rectangle" ;
.
ex:computeArea
  rdf:type sh:Function ;
  rdfs:comment "Computes the area of a given rectangle (?arg1) as the product of its width and height." ;
  rdfs:label "compute area" ;
  sh:argument [
      rdfs:comment "The rectangle whose area to compute." ;
      sh:class ex:Rectangle ;
      sh:predicate sh:arg1 ;
    ] ;
  sh:returnType xsd:integer ;
  sh:sparql """
		SELECT ((?width * ?height) AS ?result)
		WHERE {
			?arg1 ex:width ?width .
			?arg1 ex:height ?height .
		}
		""" ;
.
